<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/security
http://www.springframework.org/schema/security/spring-security.xsd">
    <!--родительский элемент всех функциональных возможностей пространства имен, связанных с веб-сайтом.
     Здесь мы можем настроить, какие URL-адреса перехватывать, какие разрешения требуются, какой тип входа использовать
      и все подобные конфигурации.auto-config — Установка для этого атрибута значения true автоматически настраивает
      функции входа в систему, базового входа и выхода. Spring Security генерирует их, используя стандартные значения и включенные функции.-->
    <http auto-config="true">

<!--        intercept-url − Задает шаблон URL-адресов, которые мы хотим защитить, используя атрибут access.-->
<!--        access − Указывает, каким пользователям разрешен доступ к URL-адресу, указанному атрибутом pattern.-->
<!--        Это делается на основе ролей и разрешений пользователя. Мы можем использовать SPEL с этим атрибутом.-->
        <intercept-url pattern="/admin"
                       access="hasRole('ROLE_ADMIN')"/>
    </http>

<!--    authentication-manager — <authentication-manager> используется для настройки пользователей, их паролей и ролей в-->
<!--    приложении. Эти пользователи смогут получить доступ к защищенным частям приложения, если у них есть соответствующие роли.-->
<!--    Компонент DaoAuthenticationProvider будет создан поставщиком <authentication< а элемент <user-service< создаст InMemoryDaoImpl. -->
<!--    Все элементы поставщика аутентификации позволят пользователям проходить проверку подлинности,-->
<!--    предоставляя информацию о пользователе диспетчеру аутентификации.-->
    <authentication-manager>
        <authentication-provider>
            <user-service>
                <user name="admin" password="{noop}1234" authorities="ROLE_ADMIN"/>
            </user-service>
        </authentication-provider>
    </authentication-manager>

<!--    password-encoder − Это зарегистрирует компонент кодировщика паролей. Чтобы упростить ситуацию, мы использовали NoOpPasswordEncoder.-->
    <beans:bean id="passwordEncoder"
                class="org.springframework.security.crypto.password.NoOpPasswordEncoder"
                factory-method="getInstance">
    </beans:bean>
</beans:beans>
        <!--<?xml version="1.0" encoding="UTF-8"?>-->
        <!--<b:beans xmlns="http://www.springframework.org/schema/security"-->
        <!--         xmlns:b="http://www.springframework.org/schema/beans"-->
        <!--         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"-->
        <!--         xsi:schemaLocation="http://www.springframework.org/schema/beans-->
        <!--          https://www.springframework.org/schema/beans/spring-beans.xsd-->
        <!--						http://www.springframework.org/schema/security-->
        <!--						 https://www.springframework.org/schema/security/spring-security.xsd">-->

        <!--    <http>-->
        <!--        <intercept-url pattern="/" access="hasRole('GUEST')"/>-->
        <!--        <intercept-url pattern="/java-courses/**" access="hasAnyRole('GUEST', 'REGISTERED')"/>-->
        <!--        <form-login-->
        <!--                login-processing-url="/login"-->
        <!--                username-parameter="username"-->
        <!--                password-parameter="password"-->
        <!--                default-target-url="/"/>-->
        <!--    </http>-->

        <!--    <authentication-manager>-->
        <!--        <authentication-provider>-->
        <!--            <user-service>-->
        <!--                <user name="qwer" password="{noop}qwer" authorities="ROLE_GUEST"/>-->
        <!--                <user name="alex" password="{noop}alex" authorities="ROLE_REGISTERED"/>-->
        <!--            </user-service>-->
        <!--        </authentication-provider>-->
        <!--    </authentication-manager>-->

        <!--</b:beans>-->

